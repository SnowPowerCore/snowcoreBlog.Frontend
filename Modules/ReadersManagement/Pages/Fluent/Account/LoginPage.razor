@using Apizr
@using Fido2NetLib
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@using Emojis = Microsoft.FluentUI.AspNetCore.Components.Emojis
@using snowcoreBlog.Frontend.Infrastructure.Events
@using snowcoreBlog.Frontend.Infrastructure.Protocol
@using snowcoreBlog.Frontend.ReadersManagement.Resources
@using snowcoreBlog.Frontend.ReadersManagement.Resources.Icons
@using snowcoreBlog.Frontend.SharedComponents.Components.Altcha;
@using snowcoreBlog.Frontend.SharedComponents.Components.Fluent
@using snowcoreBlog.Frontend.SharedComponents.Features.Antiforgery
@using snowcoreBlog.Frontend.SharedComponents.Validation
@using snowcoreBlog.PublicApi.Api
@using snowcoreBlog.PublicApi.BusinessObjects.Dto
@using snowcoreBlog.PublicApi.Extensions
@using snowcoreBlog.PublicApi.Validation.Dto

@page "/login"
@attribute [StreamRendering]
@inherits TimeWarpStateComponent

@inject NavigationManager Navigation
@inject WebAuthn WebAuthn
@inject IApizrManager<IReaderAccountManagementApi> ReaderAccountApi;
@inject IValidator<RequestAssertionOptionsDto> RequestAssertionOptionsValidator;

<div class="h-100">
    <FlexibleFloatingCard FloatingIcon="@(new Icons.Color.Size24.Person())">
        <RegularSizeContent>
            <FluentStack Class="px-3 py-2" Orientation="Orientation.Vertical">
                <FluentSpacer />
                <FluentTabs Style="justify-items: center;" Class="px-0 py-0">
                    <FluentTab Label="@TranslationResources.PasskeyTabLabel" Class="px-0 py-0">
                        <Header>
                            <div class="d-flex flex-column align-items-center">
                                <FluentIcon Value="@(new Icons.Color.Size24.Vault())" />
                                <FluentSpacer Width="5" />
                                @TranslationResources.PasskeyHeaderLabel
                            </div>
                        </Header>
                        <Content>
                            <EditForm class="w-100" FormName="@ReaderAccountPasswordlessLoginFormName" Model="@PasswordlessLogin" OnSubmit="SubmitPasswordlessLoginForm">
                                <FormFluentValidationValidator @ref="_fluentValidationValidator" Validator="@RequestAssertionOptionsValidator" />
                                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch">
                                    <FluentSpacer />
                                    <FluentSpacer />
                                    <FluentTextField InputMode="InputMode.Email" Name="login" Label="@TranslationResources.EmailFieldLabel" @bind-Value=@PasswordlessLogin.Email Required Size="40" />
                                    <FluentValidationMessage For=@(() => PasswordlessLogin.Email) />
                                    <FluentSpacer />
                                    <FluentLabel>
                                        <FluentAnchor Appearance="Appearance.Hypertext" Href="javascript: void(0);">
                                            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="0"
                                                VerticalGap="0" VerticalAlignment="VerticalAlignment.Center">
                                                <FluentRandomIdIcon Width="24px" Value="@(new QuestionIcon())" />
                                                <FluentSpacer Width="5" />
                                                @TranslationResources.PasswordlessDialogHyperlinkLabel
                                            </FluentStack>
                                        </FluentAnchor>
                                    </FluentLabel>
                                    <FluentSpacer />
                                    <AltchaWidget
                                        ChallengeUrl="https://localhost/api/readers/captcha/challenge/v1"
                                        OnVerified="HandleOnVerified"/>
                                    <FluentSpacer />
                                    <FluentButton Class="align-self-end" Type="ButtonType.Submit" Appearance="Appearance.Accent">
                                        @TranslationResources.LoginButtonLabel
                                    </FluentButton>
                                </FluentStack>
                            </EditForm>
                        </Content>
                    </FluentTab>
                    <FluentTab Label="@TranslationResources.AuthenticatorTabLabel" Class="px-0 py-0">
                        <Header>
                            <div class="d-flex flex-column align-items-center">
                                <FluentEmoji Width="24px"
                                    Value="@(new Emojis.Objects.Color.Default.MobilePhoneWithArrow())" />
                                <FluentSpacer Width="5" />
                                @TranslationResources.AuthenticatorHeaderLabel
                            </div>
                        </Header>
                        <Content>
                            <EditForm class="w-100" FormName="@ReaderAccountOneTimeCodeLoginFormName" Model="@PasswordlessLogin" OnSubmit="SubmitOneTimeCodeLoginForm">
                                <FormFluentValidationValidator @ref="_fluentValidationValidator" Validator="@RequestAssertionOptionsValidator" />
                                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch">
                                    <FluentSpacer />
                                    <FluentSpacer />
                                    <FluentTextField Name="login" Label="@TranslationResources.EmailFieldLabel" InputMode="InputMode.Email" Required Size="40" />
                                    <FluentSpacer />
                                    <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="0"
                                        VerticalGap="0" VerticalAlignment="VerticalAlignment.Center">
                                        <FluentRandomIdIcon Width="24px" Value="@(new InformationIcon())" />
                                        <FluentSpacer Width="5" />
                                        @TranslationResources.OTCNextPageInfoLabel1<br/>
                                        @TranslationResources.OTCNextPageInfoLabel2
                                    </FluentStack>
                                    <FluentSpacer />
                                    <FluentButton Class="align-self-end" Type="ButtonType.Submit" Appearance="Appearance.Accent">
                                        @TranslationResources.AuthenticatorButtonLabel
                                    </FluentButton>
                                </FluentStack>
                            </EditForm>
                        </Content>
                    </FluentTab>
                    <FluentTab Label="@TranslationResources.OtherTabLabel" Class="px-0 py-0">
                        <Header>
                            <div class="d-flex flex-column align-items-center">
                                <FluentIcon Value="@(new Icons.Color.Size24.PeopleTeam())" />
                                <FluentSpacer Width="5" />
                                @TranslationResources.OtherHeaderLabel
                            </div>
                        </Header>
                        <Content>
                            <FluentStack Orientation="Orientation.Vertical">
                                <FluentSpacer />
                                <FluentSpacer />
                                <FluentLabel Alignment="HorizontalAlignment.Center">
                                    @TranslationResources.OtherLoginMethodsInfoLabel1<br />
                                    @TranslationResources.OtherLoginMethodsInfoLabel2<br />
                                    @TranslationResources.OtherLoginMethodsInfoLabel3<FluentAnchor
                                        Id="termsAndConditionsInfo" Appearance="Appearance.Hypertext"
                                        Href="javascript: void(0);">@TranslationResources.TermsConditionsHyperlinkLabelAllSmall.</FluentAnchor>
                                    <FluentTooltip Anchor="termsAndConditionsInfo" Delay="10" MaxWidth="150px"
                                        Position="TooltipPosition.Right">
                                        @TranslationResources.TermsConditionsTooltipLabel1<br />
                                        @TranslationResources.TermsConditionsTooltipLabel2
                                    </FluentTooltip>
                                </FluentLabel>
                                <FluentSpacer />
                                <FluentSpacer />
                                <div class="d-flex align-self-center gap-3">
                                    <FluentButton Appearance="Appearance.Neutral"
                                        Style="height: 72px; width: 72px;">
                                        <FluentIcon Value="@(new AppleLogoIcon())" Width="24px" />
                                    </FluentButton>
                                    <FluentSpacer />
                                    <FluentButton Appearance="Appearance.Neutral"
                                        Style="height: 72px; width: 72px;">
                                        <FluentIcon Value="@(new GoogleLogoIcon())" Width="24px" />
                                    </FluentButton>
                                    <FluentSpacer />
                                    <FluentButton Appearance="Appearance.Neutral"
                                        Style="height: 72px; width: 72px;">
                                        <FluentIcon Value="@(new MicrosoftLogoIcon())" Width="24px" />
                                    </FluentButton>
                                </div>
                            </FluentStack>
                        </Content>
                    </FluentTab>
                </FluentTabs>
                <FluentSpacer />
                <FluentSpacer />
                <FluentDivider Class="w-100" Orientation="Orientation.Horizontal"
                    Role="DividerRole.Presentation" />
                <FluentSpacer />
                <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="0"
                    VerticalGap="0" VerticalAlignment="VerticalAlignment.Center">
                    <FluentRandomIdIcon Width="24px" Value="@(new InformationIcon())" />
                    <FluentSpacer Width="5" />
                    <FluentLabel>@TranslationResources.RegisterPromptLabel</FluentLabel>
                </FluentStack>
                <FluentSpacer />
                <FluentButton OnClick="@(() => Navigation.NavigateTo("/register"))" Class="align-self-end" Appearance="Appearance.Neutral">
                    @TranslationResources.RegisterButtonLabel
                </FluentButton>
            </FluentStack>
        </RegularSizeContent>
    </FlexibleFloatingCard>
</div>

@code
{
    public const string ReaderAccountPasswordlessLoginFormName = "ReaderAccountPasswordlessLoginForm";
    public const string ReaderAccountOneTimeCodeLoginFormName = "ReaderAccountOneTimeCodeLoginForm";
    private FormFluentValidationValidator? _fluentValidationValidator;
    private RequestAssertionOptionsDto _emptyState = new() { Email = string.Empty, UserVerification = new() };
    
    private string? Captcha { get; set; } = string.Empty;

    [SupplyParameterFromForm(FormName = ReaderAccountPasswordlessLoginFormName)]
    private RequestAssertionOptionsDto? PasswordlessLogin { get; set; }

    public LoginPage()
    {
        PasswordlessLogin = _emptyState;
    }

    private void HandleOnVerified(AltchaWidgetVerifiedEventArgs verifyArgs)
    {
        Captcha = verifyArgs.Payload;
    }

    private async Task SubmitPasswordlessLoginForm(EditContext editContext)
    {
        if (_fluentValidationValidator is default(FormFluentValidationValidator))
            return;

        var success = await _fluentValidationValidator.ValidateAsync();
        if (!success)
            return;

        if (string.IsNullOrEmpty(Captcha))
            return;

        await WebAuthn.Init();

        var requestData = (RequestAssertionOptionsDto)editContext.Model;
        var antiforgery = GetState<AntiforgeryState>();
        
        var response = await ReaderAccountApi.ExecuteAsync((opt, api) =>
            api.RequestAssertionOptions(requestData, antiforgery.RequestVerificationToken, opt));

        var data = response.ToData<AssertionOptions>(out var errors);
        if (data is not default(AssertionOptions) && errors.Count == 0)
        {
            try
            {
                // Present options to user and get response (usernameless users will be asked by their authenticator, which credential they want to use to sign the challenge)
                var assertion = await WebAuthn.VerifyAsync(data);

                // Send response to server
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }

    private async Task SubmitOneTimeCodeLoginForm(EditContext editContext)
    {
        if (_fluentValidationValidator is default(FormFluentValidationValidator))
            return;

        var success = await _fluentValidationValidator.ValidateAsync();
        if (!success)
            return;

        if (string.IsNullOrEmpty(Captcha))
            return;
    }
}