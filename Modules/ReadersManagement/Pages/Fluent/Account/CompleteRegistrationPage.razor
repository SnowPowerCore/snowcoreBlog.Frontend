@using Apizr
@using Fido2NetLib
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@using Emojis = Microsoft.FluentUI.AspNetCore.Components.Emojis
@using Microsoft.AspNetCore.Components.Forms
@using System.Web
@using System.Text.Json
@using snowcoreBlog.Frontend.Infrastructure.Context
@using snowcoreBlog.Frontend.Infrastructure.Protocol
@using snowcoreBlog.Frontend.ReadersManagement.Features.Register;
@using snowcoreBlog.Frontend.ReadersManagement.Resources
@using snowcoreBlog.Frontend.ReadersManagement.Resources.Icons
@using snowcoreBlog.Frontend.SharedComponents.Components.Fluent
@using snowcoreBlog.Frontend.SharedComponents.Features.Antiforgery
@using snowcoreBlog.PublicApi.Api
@using snowcoreBlog.PublicApi.BusinessObjects.Dto
@using snowcoreBlog.PublicApi.Extensions
@using snowcoreBlog.PublicApi.Validation.Dto

@page "/register/complete"
@attribute [StreamRendering]
@inherits TimeWarpStateComponent

@inject NavigationManager Navigation
@inject WebAuthn WebAuthn
@inject IApizrManager<IReaderAccountManagementApi> ReaderAccountApi
@inject IValidator<RequestAttestationOptionsDto> RequestAttestationOptionsValidator
@inject IValidator<ConfirmCreateReaderAccountDto> ConfirmCreateReaderAccountValidator

<FlexibleFloatingCard FloatingIcon="@(new Icons.Color.Size24.LockClosed())">
    <RegularSizeContent>
        <FluentStack Class="px-3" Orientation="Orientation.Vertical">
            <FluentSpacer />
            <FluentSpacer />
            <FluentStack Orientation="Orientation.Vertical"
                HorizontalAlignment="HorizontalAlignment.Center">
                <FluentRandomIdIcon Width="48px" Value="@(new InformationIcon())" />
                <FluentSpacer />
                <FluentLabel Alignment="HorizontalAlignment.Center">@TranslationResources.CompleteRegistrationInfoLabel</FluentLabel>
                <FluentSpacer />
                <FluentButton OnClick="@CreatePasskeyAsync" Class="align-self-center" Appearance="Appearance.Neutral">
                    @TranslationResources.ContinueButtonLabel
                </FluentButton>
            </FluentStack>
            <FluentSpacer />
        </FluentStack>
    </RegularSizeContent>
</FlexibleFloatingCard>

@code
{
    private readonly JsonSerializerOptions _jsonOptions = new FidoBlazorSerializerContext().Options;

    private DateTimeOffset VerificationTokenExpirationDate { get; set; } = DateTimeOffset.MinValue;

    private RequestAttestationOptionsDto PasswordlessRegistration { get; set; } = new()
    {
        Email = string.Empty,
        VerificationToken = string.Empty
    };

    [SupplyParameterFromQuery]
    private string Email
    {
        get => PasswordlessRegistration.Email;
        set => PasswordlessRegistration.Email = HttpUtility.UrlDecode(value);
    }

    [SupplyParameterFromQuery]
    private string VerificationToken
    {
        get => PasswordlessRegistration.VerificationToken;
        set => PasswordlessRegistration.VerificationToken = HttpUtility.UrlDecode(value);
    }

    [SupplyParameterFromQuery(Name = nameof(VerificationTokenExpirationDate))]
    private string VerificationTokenExpirationDateString
    {
        get => VerificationTokenExpirationDate.ToString();
        set
        {
            var parsed = DateTimeOffset.TryParse(HttpUtility.UrlDecode(value), out var dtOffset);
            VerificationTokenExpirationDate = parsed ? dtOffset : DateTimeOffset.MinValue;
        }
    }

    private async Task CreatePasskeyAsync()
    {
        if (VerificationTokenExpirationDate <= DateTimeOffset.UtcNow)
            return;

        using var tokenSource = new CancellationTokenSource();

        var attestationOptionsSuccess = await RequestAttestationOptionsValidator.ValidateAsync(PasswordlessRegistration, tokenSource.Token);
        if (!attestationOptionsSuccess.IsValid)
            return;

        await WebAuthn.Init();

        using var antiforgery = GetState<AntiforgeryState>();

        using var attestationResponse = await ReaderAccountApi.ExecuteAsync((opt, api) =>
            api.RequestAttestationOptions(PasswordlessRegistration, antiforgery.RequestVerificationToken, opt), o => o.WithCancellation(tokenSource.Token));
        var attestationData = attestationResponse.ToData<CredentialCreateOptions>(out var attestationErrors, _jsonOptions);
        if (attestationData is default(CredentialCreateOptions) && attestationErrors.Count > 0)
            return;

        var confirmAccountCreation = default(ConfirmCreateReaderAccountDto);

        try
        {
            // WebAuthn will present a native OS dialog here
            confirmAccountCreation = new ConfirmCreateReaderAccountDto
            {
                Email = PasswordlessRegistration.Email,
                VerificationToken = PasswordlessRegistration.VerificationToken,
                AuthenticatorAttestation = await WebAuthn.CreateCredsAsync(attestationData!)
            };
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            var errorMessage = e.Message;
            if (attestationData?.ExcludeCredentials?.Count > 0)
            {
                errorMessage += " (You may have already registered this device)";
            }
            return;
        }

        if (confirmAccountCreation is default(ConfirmCreateReaderAccountDto))
            return;
    
        var confirmAccountCreationSuccess = await ConfirmCreateReaderAccountValidator.ValidateAsync(confirmAccountCreation, tokenSource.Token);
        if (!confirmAccountCreationSuccess.IsValid)
            return;
            
        using var createAccountResponse = await ReaderAccountApi.ExecuteAsync((opt, api) =>
            api.ConfirmCreateByEmail(confirmAccountCreation, antiforgery.RequestVerificationToken, opt), o => o.WithCancellation(tokenSource.Token));
        var createAccountData = createAccountResponse.ToData<ReaderAccountCreatedDto>(out var createAccountErrors);
        if (createAccountData is default(ReaderAccountCreatedDto) && createAccountErrors.Count > 0)
            return;

        Navigation.NavigateTo("/login");
    }
}