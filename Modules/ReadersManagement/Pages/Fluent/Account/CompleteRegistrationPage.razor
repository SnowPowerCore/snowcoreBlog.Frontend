@using Apizr
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@using Emojis = Microsoft.FluentUI.AspNetCore.Components.Emojis
@using Microsoft.AspNetCore.Components.Forms
@using System.Web
@using snowcoreBlog.Frontend.ReadersManagement.Features.Register;
@using snowcoreBlog.Frontend.ReadersManagement.Resources
@using snowcoreBlog.Frontend.ReadersManagement.Resources.Icons
@using snowcoreBlog.Frontend.SharedComponents.Components.Fluent
@using snowcoreBlog.Frontend.SharedComponents.Features.Antiforgery
@using snowcoreBlog.PublicApi.Api
@using snowcoreBlog.PublicApi.BusinessObjects.Dto
@using snowcoreBlog.PublicApi.Extensions
@using snowcoreBlog.PublicApi.Validation.Dto

@page "/register/complete"
@attribute [StreamRendering]
@inherits TimeWarpStateComponent

@inject NavigationManager Navigation

<FlexibleFloatingCard FloatingIcon="@(new Icons.Color.Size24.CheckboxPerson())">
    <RegularSizeContent>
        <FluentStack Class="px-3" Orientation="Orientation.Vertical">
            <FluentSpacer />
            <FluentSpacer />
            <FluentStack Orientation="Orientation.Vertical"
                HorizontalAlignment="HorizontalAlignment.Center">
                <FluentRandomIdIcon Width="48px" Value="@(new CheckmarkIcon())" />
                <FluentSpacer />
                <FluentLabel Alignment="HorizontalAlignment.Center">To finish the registration you need to set a passkey on your device.</FluentLabel>
                <FluentSpacer />
                <FluentButton OnClick="@(() => Navigation.NavigateTo("/login"))" Class="align-self-center" Appearance="Appearance.Neutral">
                    Continue
                </FluentButton>
            </FluentStack>
            <FluentSpacer />
        </FluentStack>
    </RegularSizeContent>
</FlexibleFloatingCard>

@code
{
    private DateTimeOffset VerificationTokenExpirationDate { get; set; } = DateTimeOffset.MinValue;

    [SupplyParameterFromQuery]
    private string Email { get; set; } = string.Empty;

    [SupplyParameterFromQuery]
    private string VerificationToken { get; set; } = string.Empty;

    [SupplyParameterFromQuery(Name = nameof(VerificationTokenExpirationDate))]
    private string VerificationTokenExpirationDateString
    {
        get => VerificationTokenExpirationDate.ToString();
        set
        {
            var parsed = DateTimeOffset.TryParse(HttpUtility.UrlDecode(value), out var dtOffset);
            VerificationTokenExpirationDate = parsed ? dtOffset : DateTimeOffset.MinValue;
        }
    }
}