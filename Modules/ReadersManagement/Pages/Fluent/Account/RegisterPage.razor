@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@using Emojis = Microsoft.FluentUI.AspNetCore.Components.Emojis
@using Microsoft.AspNetCore.Components.Forms
@using Morris.Blazor.FluentValidation
@using Morris.Blazor.Validation
@using Morris.Blazor.Validation.Extensions
@using snowcoreBlog.Frontend.ReadersManagement.Resources
@using snowcoreBlog.Frontend.ReadersManagement.Resources.Icons
@using snowcoreBlog.Frontend.SharedComponents.Components.Fluent
@using snowcoreBlog.PublicApi.BusinessObjects.Dto
@using snowcoreBlog.PublicApi.Validation.Dto

@page "/register"

<div class="h-100 d-flex justify-content-center align-items-center">
    <FluentGrid OnBreakpointEnter="@OnBreakpointEnterHandler" AdaptiveRendering="true">
        <FluentGridItem HiddenWhen="GridItemHidden.SmAndDown">
            <div class="d-grid my-5">
                <FluentCard Class="w-100" Style="grid-row: 1; grid-column: 1;">
                    <FluentStack Class="px-3" Orientation="Orientation.Vertical">
                        <EditForm Class="w-100" Model=@CreateNewAccount OnSubmit=SubmitForm>
                            <altcha-widget challengeurl="https://localhost/api/readers/captcha/challenge/v1" auto="onload"></altcha-widget>
                            <Validate ValidationProperties=@(ValidationProperties.Set.FluentValidator<RequestCreateReaderAccountValidation>()) />
                            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch">
                                <FluentSpacer />
                                <FluentSpacer />
                                <FluentTextField InputMode="InputMode.Email" Name="email" Label="Email" @bind-Value=@CreateNewAccount.Email Required />
                                <FluentValidationMessage For=@(() => CreateNewAccount.Email) />
                                <FluentSpacer />
                                <FluentTextField Name="firstName" Label="First Name" @bind-Value=@CreateNewAccount.FirstName Required />
                                <FluentValidationMessage For=@(() => CreateNewAccount.FirstName) />
                                <FluentSpacer />
                                <FluentTextField Name="lastName" Label="Last Name" @bind-Value=@CreateNewAccount.LastName />
                                <FluentValidationMessage For=@(() => CreateNewAccount.LastName) />
                                <FluentSpacer />
                                <FluentTextField Name="nickName" Label="Nick Name" @bind-Value=@CreateNewAccount.NickName Required />
                                <FluentValidationMessage For=@(() => CreateNewAccount.NickName) />
                                <FluentSpacer />
                                <FluentTextField InputMode="InputMode.Telephone" Name="phoneNumber" Label="Phone Number" @bind-Value=@CreateNewAccount.PhoneNumber />
                                <FluentValidationMessage For=@(() => CreateNewAccount.PhoneNumber) />
                                <FluentSpacer />
                                <FluentCheckbox @bind-Value="@CreateNewAccount.InitialEmailConsent" Required>
                                    I allow necessary emails to be delivered to my email<br/>(you will later have an option to change email preferences).
                                </FluentCheckbox>
                                <FluentValidationMessage For=@(() => CreateNewAccount.InitialEmailConsent) />
                                <FluentCheckbox @bind-Value="@CreateNewAccount.ConfirmedAgreement" Required>
                                    I agree with the<FluentAnchor
                                        Id="termsAndConditionsInfo" Appearance="Appearance.Hypertext"
                                        Href="javascript: void(0);">Terms &
                                        Conditions</FluentAnchor>document.
                                </FluentCheckbox>
                                <FluentValidationMessage For=@(() => CreateNewAccount.ConfirmedAgreement) />
                                <FluentSpacer />
                                <FluentButton Class="align-self-end" Type="ButtonType.Submit"
                                    Appearance="Appearance.Accent">Register
                                </FluentButton>
                            </FluentStack>
                        </EditForm>
                        <FluentSpacer />
                        <FluentSpacer />
                        <FluentDivider Class="w-100" Orientation="Orientation.Horizontal"
                            Role="DividerRole.Presentation" />
                        <FluentSpacer />
                        <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="0"
                            VerticalGap="0" VerticalAlignment="VerticalAlignment.Center">
                            <FluentRandomIdIcon Width="24px" Value="@(new InformationIcon())" />
                            <FluentSpacer Width="5" />
                            <FluentLabel>If you already have an account, you can login.</FluentLabel>
                        </FluentStack>
                        <FluentSpacer />
                        <FluentButton Class="align-self-end" Appearance="Appearance.Neutral">
                            Login
                        </FluentButton>
                        <FluentSpacer />
                        <FluentSpacer />
                    </FluentStack>
                </FluentCard>
                <div class="bg-icon-container position-relative">
                    <FluentIcon Value="@(new Icons.Color.Size24.BuildingPeople())" Width="256px" />
                </div>
            </div>
        </FluentGridItem>
        <FluentGridItem HiddenWhen="GridItemHidden.MdAndUp" Style="max-width: none;">
        </FluentGridItem>
    </FluentGrid>
</div>

@code
{
    [SupplyParameterFromForm]
    private string? Captcha { get; set; } = string.Empty;

    private RequestCreateReaderAccountDto CreateNewAccount { get; set; } =
        new() { Email = string.Empty, FirstName = string.Empty, NickName = string.Empty, InitialEmailConsent = false, ConfirmedAgreement = false };

    private void SubmitForm(EditContext editContext)
	{
		var success = editContext.ValidateObjectTree();
        if (!success)
            return;

        
	}

    private void OnBreakpointEnterHandler(GridItemSize size) { }
}