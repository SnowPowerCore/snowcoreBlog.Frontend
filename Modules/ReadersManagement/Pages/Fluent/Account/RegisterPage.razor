@using Apizr
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons
@using Emojis = Microsoft.FluentUI.AspNetCore.Components.Emojis
@using Microsoft.AspNetCore.Components.Forms
@using snowcoreBlog.Frontend.Infrastructure.Events
@using snowcoreBlog.Frontend.ReadersManagement.Features.Register;
@using snowcoreBlog.Frontend.ReadersManagement.Resources
@using snowcoreBlog.Frontend.ReadersManagement.Resources.Icons
@using snowcoreBlog.Frontend.SharedComponents.Components.Altcha
@using snowcoreBlog.Frontend.SharedComponents.Components.Fluent
@using snowcoreBlog.Frontend.SharedComponents.Features.Antiforgery
@using snowcoreBlog.Frontend.SharedComponents.Providers
@using snowcoreBlog.Frontend.SharedComponents.Validation
@using snowcoreBlog.PublicApi.Api
@using snowcoreBlog.PublicApi.BusinessObjects.Dto
@using snowcoreBlog.PublicApi.Extensions
@using snowcoreBlog.PublicApi.Validation.Dto

@page "/register"
@attribute [StreamRendering]
@inherits TimeWarpStateComponent

@inject NavigationManager Navigation
@inject IApizrManager<IReaderAccountManagementApi> ReaderAccountApi
@inject IValidator<RequestCreateReaderAccountDto> RequestCreateReaderAccountValidator

<FlexibleFloatingCard FloatingIcon="@(new Icons.Color.Size24.BuildingPeople())">
    <RegularSizeContent>
        <FluentStack Class="px-3" Orientation="Orientation.Vertical">
            <EditForm class="w-100" FormName="@ReaderAccountRegisterFormName" Model="@CreateNewAccount" OnSubmit="@SubmitFormAsync">
                <FormFluentValidationValidator @ref="_fluentValidationValidator" Validator="@RequestCreateReaderAccountValidator" />
                <FormTrackFieldsChangeProvider OnFieldChanged="OnRegisterFormFieldChangedAsync"/>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch">
                    <FluentSpacer />
                    <FluentSpacer />
                    <FluentTextField InputMode="InputMode.Email" Name="email" Label="@TranslationResources.EmailFieldLabel" @bind-Value=@CreateNewAccount.Email Required />
                    <FluentValidationMessage For=@(() => CreateNewAccount.Email) />
                    <FluentSpacer />
                    <FluentTextField Name="firstName" Label="@TranslationResources.FirstNameFieldLabel" @bind-Value=@CreateNewAccount.FirstName Required />
                    <FluentValidationMessage For=@(() => CreateNewAccount.FirstName) />
                    <FluentSpacer />
                    <FluentTextField Name="lastName" Label="@TranslationResources.LastNameFieldLabel" @bind-Value=@CreateNewAccount.LastName />
                    <FluentValidationMessage For=@(() => CreateNewAccount.LastName) />
                    <FluentSpacer />
                    <FluentTextField Name="nickName" Label="@TranslationResources.NickNameFieldLabel" @bind-Value=@CreateNewAccount.NickName Required />
                    <FluentValidationMessage For=@(() => CreateNewAccount.NickName) />
                    <FluentSpacer />
                    <FluentTextField InputMode="InputMode.Telephone" Name="phoneNumber" Label="@TranslationResources.PhoneNumberFieldLabel" @bind-Value=@CreateNewAccount.PhoneNumber />
                    <FluentValidationMessage For=@(() => CreateNewAccount.PhoneNumber) />
                    <FluentSpacer />
                    <FluentCheckbox @bind-Value="@CreateNewAccount.InitialEmailConsent" Required>
                        @TranslationResources.InitialEmailConsentInfoLabel1<br/>@TranslationResources.InitialEmailConsentInfoLabel2
                    </FluentCheckbox>
                    <FluentValidationMessage For=@(() => CreateNewAccount.InitialEmailConsent) />
                    <FluentCheckbox @bind-Value="@CreateNewAccount.ConfirmedAgreement" Required>
                        @TranslationResources.ConfirmedAgreementInfoLabel1<FluentAnchor
                            Id="termsAndConditionsInfo" Appearance="Appearance.Hypertext"
                            Href="javascript: void(0);">@TranslationResources.ConfirmedAgreementInfoLabel2</FluentAnchor>@TranslationResources.ConfirmedAgreementInfoLabel3
                    </FluentCheckbox>
                    <FluentValidationMessage For=@(() => CreateNewAccount.ConfirmedAgreement) />
                    <FluentSpacer />
                    <AltchaWidget
                        ChallengeUrl="https://localhost/api/readers/captcha/challenge/v1"
                        OnVerified="HandleOnVerified"/>
                    <FluentSpacer />
                    <FluentButton Class="align-self-end" Type="ButtonType.Submit"
                        Appearance="Appearance.Accent">@TranslationResources.RegisterButtonLabel
                    </FluentButton>
                </FluentStack>
            </EditForm>
            <FluentSpacer />
            <FluentSpacer />
            <FluentDivider Class="w-100" Orientation="Orientation.Horizontal"
                Role="DividerRole.Presentation" />
            <FluentSpacer />
            <FluentStack Orientation="Orientation.Horizontal" HorizontalGap="0"
                VerticalGap="0" VerticalAlignment="VerticalAlignment.Center">
                <FluentRandomIdIcon Width="24px" Value="@(new InformationIcon())" />
                <FluentSpacer Width="5" />
                <FluentLabel>@TranslationResources.LoginPromptLabel</FluentLabel>
            </FluentStack>
            <FluentSpacer />
            <FluentButton OnClick="@(() => Navigation.NavigateTo("/login"))" Class="align-self-end" Appearance="Appearance.Neutral">
                @TranslationResources.LoginButtonLabel
            </FluentButton>
            <FluentSpacer />
            <FluentSpacer />
        </FluentStack>
    </RegularSizeContent>
</FlexibleFloatingCard>

@code
{
    public const string ReaderAccountRegisterFormName = "ReaderAccountRegisterForm";

    private FormFluentValidationValidator? _fluentValidationValidator;
    private readonly RequestCreateReaderAccountDto _emptyState = new() { Email = string.Empty, FirstName = string.Empty, NickName = string.Empty, InitialEmailConsent = false, ConfirmedAgreement = false };

    private string? Captcha { get; set; } = string.Empty;

    [SupplyParameterFromForm(FormName = ReaderAccountRegisterFormName)]
    private RequestCreateReaderAccountDto? CreateNewAccount { get; set; }

    public RegisterPage()
    {
        CreateNewAccount = _emptyState;
    }

    protected override void OnParametersSet()
    {
        CreateNewAccount ??= _emptyState;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            CreateNewAccount = GetState<RegisterState>().CurrentModel;
        }
    }

    private async Task OnRegisterFormFieldChangedAsync(FieldChangedEventArgs? e)
    {
        using var tokenSource = new CancellationTokenSource();
        using var createNewAccountState = GetState<RegisterState>();
        await createNewAccountState.SetCurrentInput(CreateNewAccount, tokenSource.Token);
    }

    private void HandleOnVerified(AltchaWidgetVerifiedEventArgs verifyArgs)
    {
        Captcha = verifyArgs.Payload;
    }

    private async Task SubmitFormAsync(EditContext editContext)
	{
        if (_fluentValidationValidator is default(FormFluentValidationValidator))
            return;

		var success = await _fluentValidationValidator.ValidateAsync();
        if (!success)
            return;

        if (string.IsNullOrEmpty(Captcha))
            return;

        var requestData = (RequestCreateReaderAccountDto)editContext.Model;
        using var antiforgery = GetState<AntiforgeryState>();
            
        using var tokenSource = new CancellationTokenSource();

        using var response = await ReaderAccountApi.ExecuteAsync((opt, api) =>
            api.RequestCreateByEmail(requestData, antiforgery.RequestVerificationToken, Captcha, opt), o => o.WithCancellation(tokenSource.Token));
        var data = response.ToData<RequestReaderAccountCreationResultDto>(out var errors);
        if (data is not default(RequestReaderAccountCreationResultDto)
            && data.Id != Guid.Empty
            && errors.Count == 0)
        {
            await GetState<RegisterState>().SetCurrentInput(_emptyState, tokenSource.Token);
            Navigation.NavigateTo("/register/info/confirm");
        }
	}
}