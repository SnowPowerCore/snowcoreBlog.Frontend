@using snowcoreBlog.PublicApi.BusinessObjects.Dto
@using snowcoreBlog.PublicApi.Extensions

<div class="highlight-articles-section">
	@if (Articles is null || !Articles.Any())
	{
		<div class="no-articles">No articles yet.</div>
	}
	else
	{
		var three = Articles.OrderByDescending(a => a.PublishedAt ?? DateTime.MinValue).Take(3).ToArray();
		<div class="highlight-grid">
			@if (three.Length >= 1)
			{
				<a class="highlight-main" href="@GetArticleUrl(three[0])" aria-label="@three[0].Title">
					<div class="highlight-main-image" style="background-image: url('@(three[0].CoverImageUrl ?? "")')"></div>
					<div class="highlight-main-body">
						<h3 class="title">@three[0].Title</h3>
						<p class="meta">@FormatDate(three[0].PublishedAt) • @string.Join(", ", three[0].AuthorUserIds ?? new Guid[0])</p>
						<p class="excerpt">@Excerpt(three[0].Markdown)</p>
					</div>
				</a>
			}

			<div class="highlight-side">
				@if (three.Length >= 2)
				{
					<a class="side-item" href="@GetArticleUrl(three[1])" aria-label="@three[1].Title">
						<div class="side-thumb" style="background-image: url('@(three[1].CoverImageUrl ?? "")')"></div>
						<div class="side-body">
							<h4 class="title">@three[1].Title</h4>
							<p class="meta">@FormatDate(three[1].PublishedAt)</p>
						</div>
					</a>
				}

				@if (three.Length >= 3)
				{
					<a class="side-item" href="@GetArticleUrl(three[2])" aria-label="@three[2].Title">
						<div class="side-thumb" style="background-image: url('@(three[2].CoverImageUrl ?? "")')"></div>
						<div class="side-body">
							<h4 class="title">@three[2].Title</h4>
							<p class="meta">@FormatDate(three[2].PublishedAt)</p>
						</div>
					</a>
				}
			</div>
		</div>
	}
</div>

@code
{
	[Parameter]
	public IEnumerable<ArticleDto>? Articles { get; set; }

	private string GetArticleUrl(ArticleDto article) =>
        $"/articles/{(article.Slug ?? article.Id.ToString())}";

	private string Excerpt(string? markdown, int max = 160)
	{
		if (string.IsNullOrWhiteSpace(markdown))
			return string.Empty;

        // Strip basic markdown-ish characters for a short excerpt
        var s = System.Text.RegularExpressions.Regex.Replace(markdown, @"[#>*`\[\]\(\)]", string.Empty);
        s = System.Text.RegularExpressions.Regex.Replace(s, @"\s+", " ").Trim();
            if (s.Length <= max) return s;
		return s.Substring(0, max).TrimEnd() + "…";
	}

	private string FormatDate(DateTime? dt) =>
        dt?.ToString("MMM d, yyyy") ?? string.Empty;
}

<style>
	.highlight-articles-section { width: 100%; }
	.no-articles { padding: 1rem; color: var(--neutral-foreground, #666); }
	.highlight-grid {
		display: grid;
		grid-template-columns: 2fr 1fr;
		gap: 1rem;
		align-items: stretch;
	}
	.highlight-main {
		display: flex;
		flex-direction: column;
		text-decoration: none;
		color: inherit;
		background: var(--neutral-lighter, #fff);
		border-radius: 6px;
		overflow: hidden;
		min-height: 360px;
	}
	.highlight-main-image { background-size: cover; background-position: center; height: 50%; }
	.highlight-main-body { padding: 1rem; display:flex; flex-direction:column; gap:0.5rem; }
	.highlight-side { display:flex; flex-direction:column; gap:1rem; }
	.side-item { display:flex; gap:0.75rem; text-decoration:none; color:inherit; align-items:center; background:var(--neutral-lighter, #fff); border-radius:6px; overflow:hidden; padding:0.5rem; }
	.side-thumb { width:96px; height:64px; background-size:cover; background-position:center; flex-shrink:0; border-radius:4px; }
	.title { margin:0; }
	.meta { margin:0; font-size:0.85rem; color:var(--neutral-foreground, #666); }

	/* Make side column split visually into two items of equal total height to the main item */
	@@media (min-width: 768px) {
		.highlight-grid { grid-auto-rows: 1fr; }
		.highlight-main { min-height: 100%; }
		.highlight-side { justify-content: space-between; }
		.side-item { height: calc(50% - 0.5rem); }
	}

	@@media (max-width: 767px) {
		.highlight-grid { grid-template-columns: 1fr; }
		.highlight-main { min-height: 220px; }
		.highlight-side { flex-direction: row; }
		.side-item { flex:1; height:120px; }
	}
</style>