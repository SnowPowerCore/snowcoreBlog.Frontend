@using Microsoft.FluentUI.AspNetCore.Components.DesignTokens
@using snowcoreBlog.PublicApi.Utilities.Dictionary
@using Icons = Microsoft.FluentUI.AspNetCore.Components.Icons

@inject DesignUnit DesignUnit
@inject AccentBaseColor AccentBaseColor
@inject BodyFont BodyFont

<div>
    <FluentCard Style="border-radius: 0;" @ref="_root">
        <FluentGrid OnBreakpointEnter="@OnBreakpointEnterHandler" AdaptiveRendering="true">
            <FluentGridItem HiddenWhen="GridItemHidden.SmAndDown">
                <FluentStack Orientation="Orientation.Horizontal" Class="d-flex align-items-center">
                    <FluentIcon Value="@(new Icons.Color.Size28.CodeBlock())" />
                    <FluentLabel Class="mb-0">@Title</FluentLabel>
                    <FluentDivider Style="height: 15px;" Orientation="Orientation.Vertical"
                        Role="DividerRole.Presentation" />
                    @foreach (var navLink in NavLinks)
                    {

                    }
                </FluentStack>
            </FluentGridItem>
            <FluentGridItem HiddenWhen="GridItemHidden.MdAndUp" Style="max-width: none;">
                <FluentStack Orientation="Orientation.Horizontal" Class="d-flex align-items-center">
                    <FluentIcon Value="@(new Icons.Color.Size28.CodeBlock())" />
                    <FluentLabel Class="mb-0">@Title</FluentLabel>
                    <FluentIcon Class="ms-auto" Value="@(new Icons.Filled.Size28.Navigation())" />
                </FluentStack>
            </FluentGridItem>
        </FluentGrid>
    </FluentCard>
</div>

@code
{
    private FluentCard _root = default!;

    [Parameter]
    public string LogoSvg { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public DictionaryWithDefault<string, string> NavLinks { get; set; } = new(defaultValue: string.Empty);

    [Parameter]
    public required string AccountLink { get; set; }

    private void OnBreakpointEnterHandler(GridItemSize size) { }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        
        if (firstRender)
        {
            await DesignUnit.SetValueFor(_root.Element, 2);
            await AccentBaseColor.SetValueFor(_root.Element, "#8853CA".ToSwatch());
            await BodyFont.SetValueFor(_root.Element, "Cascadia Mono");
        }
    }
}